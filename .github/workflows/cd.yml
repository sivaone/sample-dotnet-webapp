name: CD

description: Deploy to higher environments (qa, uat, staging, prod)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - qa
          - uat
          - staging
          - prod
      commit_sha:
        description: "Commit SHA to deploy (e.g., 7a8b9c1)"
        required: true
        type: string

permissions:
  contents: read
  id-token: write

jobs:
  ecs-deploy:
    name: Deploy to ECS Fargate
    runs-on: ubuntu-latest
    environment: 
      name: ${{ inputs.environment }}
    
    env:
      COMMIT_SHA: ${{ inputs.commit_sha }}
      ENVIRONMENT: ${{ inputs.environment }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      # Example: Use environment-specific ECS service/cluster names
      ECS_SERVICE: ${{ secrets[format('ECS_SERVICE_{0}', inputs.environment)] }}
      ECS_CLUSTER: ${{ secrets[format('ECS_CLUSTER_{0}', inputs.environment)] }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Print deployment info
        run: |
          echo "Deploying IMAGE_TAG=$IMAGE_TAG to ENVIRONMENT=$ENVIRONMENT"
          echo "ECS_SERVICE=$ECS_SERVICE"
          echo "ECS_CLUSTER=$ECS_CLUSTER"
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Set ECR_REGISTRY env
        run: echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
      
      - name: Fetch image tag from ECR for commit SHA
        id: fetch-image-tag
        run: |
          IMAGE_TAG="sha-${COMMIT_SHA}"
          IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          # Optionally verify image exists in ECR
          aws ecr describe-images --repository-name "$ECR_REPOSITORY" --image-ids imageTag="$IMAGE_TAG" --region "$AWS_REGION"
      
      - name: Render ECS task definition
        id: render-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/ecs-task-definition.json
          container-name: sample-dotnet-webapp
          image: ${{ env.IMAGE_URI }}
      
      - name: Deploy to ECS Fargate
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
