name: Release

description: Deploy when a release is published

on:
  release:
    types: [published]

permissions:
  contents: read
  id-token: write

jobs:
  ecs-deploy:
    name: Deploy to ECS Fargate
    runs-on: ubuntu-latest
    environment:
      name: prod
    env:
      ENVIRONMENT: prod
      AWS_REGION: ${{ vars.AWS_REGION }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      ECS_SERVICE: ${{ secrets.ECS_SERVICE_prod }}
      ECS_CLUSTER: ${{ secrets.ECS_CLUSTER_prod }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Resolve short commit SHA for image tag
        id: resolve-sha
        run: |
          TARGET_COMMITISH="${{ github.event.release.target_commitish }}"
          echo "TARGET_COMMITISH=$TARGET_COMMITISH"
          echo "github.sha=${{ github.sha }}"
          # If it's a SHA (40 hex chars), use it directly
          if [[ "$TARGET_COMMITISH" =~ ^[0-9a-f]{40}$ ]]; then
            SHORT_SHA=${TARGET_COMMITISH:0:7}
          else
            # Otherwise, resolve branch name to SHA
            FULL_SHA=$(git rev-parse "$TARGET_COMMITISH")
            echo "FULL_SHA=$FULL_SHA"
            SHORT_SHA=${FULL_SHA:0:7}
          fi
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
      - name: Print deployment info
        run: |
          echo "Deploying IMAGE_TAG=sha-${SHORT_SHA} to ENVIRONMENT=${ENVIRONMENT}"
          echo "ECS_SERVICE=${ECS_SERVICE}"
          echo "ECS_CLUSTER=${ECS_CLUSTER}"
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Set ECR_REGISTRY env
        run: echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
      - name: Fetch image tag from ECR for short SHA
        id: fetch-image-tag
        run: |
          IMAGE_TAG="sha-${SHORT_SHA}"
          IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          aws ecr describe-images --repository-name "$ECR_REPOSITORY" --image-ids imageTag="$IMAGE_TAG" --region "$AWS_REGION"
      - name: Render ECS task definition
        id: render-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/ecs-task-definition.json
          container-name: sample-dotnet-webapp
          image: ${{ env.IMAGE_URI }}
      - name: Deploy to ECS Fargate
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
